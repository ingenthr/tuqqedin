/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : UNQL2013.g
 *     -                            On : 2013-05-01 16:18:11
 *     -                for the parser : UNQL2013ParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
UNQL2013Parser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pUNQL2013Parser, which is returned from a call to UNQL2013ParserNew().
 *
 * The methods in pUNQL2013Parser are  as follows:
 *
 *  - 
 UNQL2013Parser_input_return
      pUNQL2013Parser->input(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_jsonObject_return
      pUNQL2013Parser->jsonObject(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_jsonArray_return
      pUNQL2013Parser->jsonArray(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_object_return
      pUNQL2013Parser->object(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_objectElement_return
      pUNQL2013Parser->objectElement(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_array_return
      pUNQL2013Parser->array(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_value_return
      pUNQL2013Parser->value(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_expr_return
      pUNQL2013Parser->expr(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_expr1_return
      pUNQL2013Parser->expr1(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_expr2_return
      pUNQL2013Parser->expr2(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_expr3_return
      pUNQL2013Parser->expr3(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_expr4_return
      pUNQL2013Parser->expr4(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_expr5_return
      pUNQL2013Parser->expr5(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_boolExpr_return
      pUNQL2013Parser->boolExpr(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_boolExpr1_return
      pUNQL2013Parser->boolExpr1(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_boolExpr2_return
      pUNQL2013Parser->boolExpr2(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_boolExpr3_return
      pUNQL2013Parser->boolExpr3(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_boolExpr4_return
      pUNQL2013Parser->boolExpr4(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_boolExpr5_return
      pUNQL2013Parser->boolExpr5(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_boolExpr6_return
      pUNQL2013Parser->boolExpr6(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_boolExprOrExpr_return
      pUNQL2013Parser->boolExprOrExpr(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_boolExprOrExpr1_return
      pUNQL2013Parser->boolExprOrExpr1(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_boolExprOrExpr2_return
      pUNQL2013Parser->boolExprOrExpr2(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_boolExprOrExpr3_return
      pUNQL2013Parser->boolExprOrExpr3(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_boolExprOrExpr4_return
      pUNQL2013Parser->boolExprOrExpr4(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_boolExprOrExpr5_return
      pUNQL2013Parser->boolExprOrExpr5(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_boolExprOrExpr6_return
      pUNQL2013Parser->boolExprOrExpr6(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_boolFunctionCall_return
      pUNQL2013Parser->boolFunctionCall(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_boolFunctionName_return
      pUNQL2013Parser->boolFunctionName(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_parenBoolExpr_return
      pUNQL2013Parser->parenBoolExpr(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_comparison_op_return
      pUNQL2013Parser->comparison_op(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_functionCall_return
      pUNQL2013Parser->functionCall(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_parenExpr_return
      pUNQL2013Parser->parenExpr(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_functionName_return
      pUNQL2013Parser->functionName(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_property_path_return
      pUNQL2013Parser->property_path(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_unql_stmt_return
      pUNQL2013Parser->unql_stmt(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_select_stmt_return
      pUNQL2013Parser->select_stmt(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_ordering_term_list_return
      pUNQL2013Parser->ordering_term_list(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_ordering_term_return
      pUNQL2013Parser->ordering_term(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_select_core_return
      pUNQL2013Parser->select_core(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_result_expr_return
      pUNQL2013Parser->result_expr(pUNQL2013Parser)
 *  - 
 UNQL2013Parser_expr_list_return
      pUNQL2013Parser->expr_list(pUNQL2013Parser)
 * 
 * 
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_UNQL2013Parser_H
#define _UNQL2013Parser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct UNQL2013Parser_Ctx_struct UNQL2013Parser, * pUNQL2013Parser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */

typedef struct UNQL2013Parser_input_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_input_return;



typedef struct UNQL2013Parser_jsonObject_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_jsonObject_return;



typedef struct UNQL2013Parser_jsonArray_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_jsonArray_return;



typedef struct UNQL2013Parser_object_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_object_return;



typedef struct UNQL2013Parser_objectElement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_objectElement_return;



typedef struct UNQL2013Parser_array_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_array_return;



typedef struct UNQL2013Parser_value_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_value_return;



typedef struct UNQL2013Parser_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_expr_return;



typedef struct UNQL2013Parser_expr1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_expr1_return;



typedef struct UNQL2013Parser_expr2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_expr2_return;



typedef struct UNQL2013Parser_expr3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_expr3_return;



typedef struct UNQL2013Parser_expr4_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_expr4_return;



typedef struct UNQL2013Parser_expr5_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_expr5_return;



typedef struct UNQL2013Parser_boolExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_boolExpr_return;



typedef struct UNQL2013Parser_boolExpr1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_boolExpr1_return;



typedef struct UNQL2013Parser_boolExpr2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_boolExpr2_return;



typedef struct UNQL2013Parser_boolExpr3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_boolExpr3_return;



typedef struct UNQL2013Parser_boolExpr4_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_boolExpr4_return;



typedef struct UNQL2013Parser_boolExpr5_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_boolExpr5_return;



typedef struct UNQL2013Parser_boolExpr6_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_boolExpr6_return;



typedef struct UNQL2013Parser_boolExprOrExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_boolExprOrExpr_return;



typedef struct UNQL2013Parser_boolExprOrExpr1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_boolExprOrExpr1_return;



typedef struct UNQL2013Parser_boolExprOrExpr2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_boolExprOrExpr2_return;



typedef struct UNQL2013Parser_boolExprOrExpr3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_boolExprOrExpr3_return;



typedef struct UNQL2013Parser_boolExprOrExpr4_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_boolExprOrExpr4_return;



typedef struct UNQL2013Parser_boolExprOrExpr5_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_boolExprOrExpr5_return;



typedef struct UNQL2013Parser_boolExprOrExpr6_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_boolExprOrExpr6_return;



typedef struct UNQL2013Parser_boolFunctionCall_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_boolFunctionCall_return;



typedef struct UNQL2013Parser_boolFunctionName_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_boolFunctionName_return;



typedef struct UNQL2013Parser_parenBoolExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_parenBoolExpr_return;



typedef struct UNQL2013Parser_comparison_op_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_comparison_op_return;



typedef struct UNQL2013Parser_functionCall_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_functionCall_return;



typedef struct UNQL2013Parser_parenExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_parenExpr_return;



typedef struct UNQL2013Parser_functionName_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_functionName_return;



typedef struct UNQL2013Parser_property_path_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_property_path_return;



typedef struct UNQL2013Parser_unql_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_unql_stmt_return;



typedef struct UNQL2013Parser_select_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_select_stmt_return;



typedef struct UNQL2013Parser_ordering_term_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_ordering_term_list_return;



typedef struct UNQL2013Parser_ordering_term_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_ordering_term_return;



typedef struct UNQL2013Parser_select_core_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_select_core_return;



typedef struct UNQL2013Parser_result_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_result_expr_return;



typedef struct UNQL2013Parser_expr_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    UNQL2013Parser_expr_list_return;




/** Context tracking structure for 
UNQL2013Parser

 */
struct UNQL2013Parser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     UNQL2013Parser_input_return
     (*input)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_jsonObject_return
     (*jsonObject)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_jsonArray_return
     (*jsonArray)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_object_return
     (*object)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_objectElement_return
     (*objectElement)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_array_return
     (*array)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_value_return
     (*value)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_expr_return
     (*expr)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_expr1_return
     (*expr1)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_expr2_return
     (*expr2)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_expr3_return
     (*expr3)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_expr4_return
     (*expr4)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_expr5_return
     (*expr5)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_boolExpr_return
     (*boolExpr)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_boolExpr1_return
     (*boolExpr1)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_boolExpr2_return
     (*boolExpr2)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_boolExpr3_return
     (*boolExpr3)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_boolExpr4_return
     (*boolExpr4)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_boolExpr5_return
     (*boolExpr5)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_boolExpr6_return
     (*boolExpr6)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_boolExprOrExpr_return
     (*boolExprOrExpr)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_boolExprOrExpr1_return
     (*boolExprOrExpr1)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_boolExprOrExpr2_return
     (*boolExprOrExpr2)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_boolExprOrExpr3_return
     (*boolExprOrExpr3)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_boolExprOrExpr4_return
     (*boolExprOrExpr4)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_boolExprOrExpr5_return
     (*boolExprOrExpr5)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_boolExprOrExpr6_return
     (*boolExprOrExpr6)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_boolFunctionCall_return
     (*boolFunctionCall)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_boolFunctionName_return
     (*boolFunctionName)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_parenBoolExpr_return
     (*parenBoolExpr)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_comparison_op_return
     (*comparison_op)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_functionCall_return
     (*functionCall)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_parenExpr_return
     (*parenExpr)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_functionName_return
     (*functionName)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_property_path_return
     (*property_path)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_unql_stmt_return
     (*unql_stmt)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_select_stmt_return
     (*select_stmt)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_ordering_term_list_return
     (*ordering_term_list)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_ordering_term_return
     (*ordering_term)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_select_core_return
     (*select_core)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_result_expr_return
     (*result_expr)	(struct UNQL2013Parser_Ctx_struct * ctx);

     UNQL2013Parser_expr_list_return
     (*expr_list)	(struct UNQL2013Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred27_UNQL2013)	(struct UNQL2013Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred28_UNQL2013)	(struct UNQL2013Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred37_UNQL2013)	(struct UNQL2013Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred38_UNQL2013)	(struct UNQL2013Parser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct UNQL2013Parser_Ctx_struct * ctx);
    void	    (*free)   (struct UNQL2013Parser_Ctx_struct * ctx);
/* @headerFile.members() */
pANTLR3_BASE_TREE_ADAPTOR	adaptor;
pANTLR3_VECTOR_FACTORY		vectors;
/* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pUNQL2013Parser UNQL2013ParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pUNQL2013Parser UNQL2013ParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define ALL      4
#define AND      5
#define ANY      6
#define ARRAY      7
#define ASC      8
#define ASTERISK      9
#define AVG      10
#define A_      11
#define BY      12
#define B_      13
#define COLON      14
#define COMMA      15
#define COUNT      16
#define C_      17
#define DESC      18
#define DISTINCT      19
#define DIVIDE      20
#define DOT      21
#define DOUBLE      22
#define D_      23
#define Digit      24
#define Double      25
#define ELEMENT      26
#define ELEMENT_MATCH_ALL      27
#define ELEMENT_MATCH_ANY      28
#define EQ      29
#define EXPLAIN      30
#define E_      31
#define EscapeSequence      32
#define Exp      33
#define FALSE      34
#define FUNCTION      35
#define F_      36
#define Frac      37
#define GROUP      38
#define GT      39
#define GTE      40
#define G_      41
#define HAVING      42
#define H_      43
#define HexDigit      44
#define ID      45
#define INTEGER      46
#define IS      47
#define I_      48
#define Int      49
#define Integer      50
#define J_      51
#define K_      52
#define LBRACE      53
#define LBRACKET      54
#define LIKE      55
#define LIMIT      56
#define LPAREN      57
#define LTE      58
#define LTT      59
#define L_      60
#define MAXX      61
#define MINN      62
#define MINUS      63
#define MISSING      64
#define MOD      65
#define M_      66
#define NEQ      67
#define NOT      68
#define NULLL      69
#define N_      70
#define OBJECT      71
#define OFFSET      72
#define OR      73
#define ORDER      74
#define O_      75
#define PLUS      76
#define P_      77
#define QUERY      78
#define Q_      79
#define RBRACE      80
#define RBRACKET      81
#define RPAREN      82
#define R_      83
#define SELECT      84
#define STRING      85
#define SUM      86
#define S_      87
#define String      88
#define StringChar      89
#define TRUE      90
#define T_      91
#define U_      92
#define UnicodeChar      93
#define V_      94
#define WHERE      95
#define W_      96
#define WhiteSpace      97
#define X_      98
#define Y_      99
#define Z_      100
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for UNQL2013Parser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
