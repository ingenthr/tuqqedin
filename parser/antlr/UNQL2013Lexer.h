/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : UNQL2013.g
 *     -                            On : 2013-05-01 16:18:12
 *     -                 for the lexer : UNQL2013LexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
UNQL2013Lexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pUNQL2013Lexer, which is returned from a call to UNQL2013LexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in pUNQL2013Lexer are  as follows:
 *
 *  - 
 void
      pUNQL2013Lexer->A_(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->B_(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->C_(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->D_(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->E_(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->F_(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->G_(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->H_(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->I_(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->J_(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->K_(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->L_(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->M_(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->N_(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->O_(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->P_(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->Q_(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->R_(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->S_(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->T_(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->U_(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->V_(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->W_(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->X_(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->Y_(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->Z_(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->AND(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->ALL(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->ANY(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->ASC(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->AVG(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->BY(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->COUNT(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->DESC(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->DISTINCT(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->EXPLAIN(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->FALSE(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->GROUP(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->HAVING(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->IS(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->LIKE(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->LIMIT(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->MINN(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->MAXX(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->MISSING(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->NULLL(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->NOT(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->OFFSET(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->OR(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->ORDER(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->SELECT(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->SUM(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->TRUE(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->WHERE(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->COLON(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->COMMA(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->LBRACE(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->RBRACE(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->LBRACKET(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->RBRACKET(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->LPAREN(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->RPAREN(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->DOT(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->LTT(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->LTE(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->GT(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->GTE(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->EQ(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->NEQ(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->PLUS(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->MINUS(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->ASTERISK(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->DIVIDE(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->MOD(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->Digit(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->HexDigit(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->UnicodeChar(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->StringChar(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->EscapeSequence(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->Int(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->Frac(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->Exp(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->WhiteSpace(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->Integer(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->Double(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->String(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->ID(pUNQL2013Lexer)
 *  - 
 void
      pUNQL2013Lexer->Tokens(pUNQL2013Lexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_UNQL2013Lexer_H
#define _UNQL2013Lexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct UNQL2013Lexer_Ctx_struct UNQL2013Lexer, * pUNQL2013Lexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
UNQL2013Lexer

 */
struct UNQL2013Lexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mA_)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mB_)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mC_)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mD_)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mE_)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mF_)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mG_)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mH_)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mI_)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mJ_)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mK_)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mL_)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mM_)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mN_)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mO_)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mP_)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mQ_)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mR_)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mS_)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mT_)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mU_)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mV_)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mW_)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mX_)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mY_)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mZ_)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mAND)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mALL)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mANY)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mASC)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mAVG)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mBY)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mCOUNT)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mDESC)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mDISTINCT)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mEXPLAIN)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mFALSE)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mGROUP)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mHAVING)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mIS)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mLIKE)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mLIMIT)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mMINN)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mMAXX)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mMISSING)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mNULLL)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mNOT)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mOFFSET)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mOR)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mORDER)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mSELECT)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mSUM)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mTRUE)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mWHERE)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mCOLON)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mCOMMA)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mLBRACE)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mRBRACE)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mLBRACKET)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mRBRACKET)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mLPAREN)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mRPAREN)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mDOT)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mLTT)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mLTE)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mGT)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mGTE)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mEQ)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mNEQ)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mPLUS)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mMINUS)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mASTERISK)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mDIVIDE)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mMOD)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mDigit)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mHexDigit)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mUnicodeChar)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mStringChar)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mEscapeSequence)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mInt)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mFrac)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mExp)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mWhiteSpace)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mInteger)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mDouble)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mString)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mID)	(struct UNQL2013Lexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct UNQL2013Lexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct UNQL2013Lexer_Ctx_struct * ctx);
    void	    (*free)   (struct UNQL2013Lexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pUNQL2013Lexer UNQL2013LexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API pUNQL2013Lexer UNQL2013LexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define ALL      4
#define AND      5
#define ANY      6
#define ARRAY      7
#define ASC      8
#define ASTERISK      9
#define AVG      10
#define A_      11
#define BY      12
#define B_      13
#define COLON      14
#define COMMA      15
#define COUNT      16
#define C_      17
#define DESC      18
#define DISTINCT      19
#define DIVIDE      20
#define DOT      21
#define DOUBLE      22
#define D_      23
#define Digit      24
#define Double      25
#define ELEMENT      26
#define ELEMENT_MATCH_ALL      27
#define ELEMENT_MATCH_ANY      28
#define EQ      29
#define EXPLAIN      30
#define E_      31
#define EscapeSequence      32
#define Exp      33
#define FALSE      34
#define FUNCTION      35
#define F_      36
#define Frac      37
#define GROUP      38
#define GT      39
#define GTE      40
#define G_      41
#define HAVING      42
#define H_      43
#define HexDigit      44
#define ID      45
#define INTEGER      46
#define IS      47
#define I_      48
#define Int      49
#define Integer      50
#define J_      51
#define K_      52
#define LBRACE      53
#define LBRACKET      54
#define LIKE      55
#define LIMIT      56
#define LPAREN      57
#define LTE      58
#define LTT      59
#define L_      60
#define MAXX      61
#define MINN      62
#define MINUS      63
#define MISSING      64
#define MOD      65
#define M_      66
#define NEQ      67
#define NOT      68
#define NULLL      69
#define N_      70
#define OBJECT      71
#define OFFSET      72
#define OR      73
#define ORDER      74
#define O_      75
#define PLUS      76
#define P_      77
#define QUERY      78
#define Q_      79
#define RBRACE      80
#define RBRACKET      81
#define RPAREN      82
#define R_      83
#define SELECT      84
#define STRING      85
#define SUM      86
#define S_      87
#define String      88
#define StringChar      89
#define TRUE      90
#define T_      91
#define U_      92
#define UnicodeChar      93
#define V_      94
#define WHERE      95
#define W_      96
#define WhiteSpace      97
#define X_      98
#define Y_      99
#define Z_      100
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for UNQL2013Lexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
