/[0-9]+/          {
                    lval.n,_ = strconv.Atoi(yylex.Text());
                    logDebugTokens("INT: %d", lval.n); 
                    return INT 
                  }
/[0-9]+\.[0-9]*/  {
                    lval.f,_ = strconv.ParseFloat(yylex.Text(), 64);
                    logDebugTokens("REAL: %f", lval.f);  
                    return REAL 
                  }
/"[^"\\]*(\\.[^"\\]*)*"/          { 
                    lval.s = yylex.Text()[1:len(yylex.Text())-1];
                    logDebugTokens("STRING: %s", lval.s);
                    return STRING }
/'[^'\\]*(\\.[^'\\]*)*'/          { 
                    lval.s = yylex.Text()[1:len(yylex.Text())-1];
                    logDebugTokens("STRING: %s", lval.s);
                    return STRING }
/TRUE|true/            { logDebugTokens("TRUE"); return TRUE }
/FALSE|false/           { logDebugTokens("FALSE"); return FALSE }
/null/                  { logDebugTokens("NULL"); return NULL }
/SELECT|select/          { logDebugTokens("SELECT"); return SELECT }
/WHERE|where/           { logDebugTokens("WHERE"); return WHERE }
/ORDER|order/     { logDebugTokens("ORDER"); return ORDER }
/BY|by/     { logDebugTokens("BY"); return BY }
/ASC|asc/   { logDebugTokens("ASC"); return ASC }
/DESC|desc/ { logDebugTokens("DESC"); return DESC }
/OFFSET|offset/ { logDebugTokens("OFFSET"); return OFFSET }
/LIMIT|limit/ { logDebugTokens("LIMIT"); return LIMIT }
/\+/              { logDebugTokens("PLUS"); return PLUS }
/-/               { logDebugTokens("MINUS"); return MINUS }
/\*/              { logDebugTokens("MULT"); return MULT }
/\//              { logDebugTokens("DIV"); return DIV }
/\=/              { logDebugTokens("EQ"); return EQ }
/AND|and/         { logDebugTokens("AND"); return AND }
/OR|or/           { logDebugTokens("OR"); return OR }
/\!/              { logDebugTokens("NOT"); return NOT }
/\!\=/            { logDebugTokens("NE"); return NE }
/\<\>/            { logDebugTokens("NE"); return NE }
/\</              { logDebugTokens("LT"); return LT }
/\<\=/            { logDebugTokens("LTE"); return LTE }
/\>/              { logDebugTokens("GT"); return GT }
/\>\=/            { logDebugTokens("GTE"); return GTE }
/\!\=/            { logDebugTokens("NE"); return NE }
/\<\>/            { logDebugTokens("NE"); return NE }
/\./              { logDebugTokens("DOT"); return DOT }
/\(/              { logDebugTokens("LPAREN"); return LPAREN }
/\)/              { logDebugTokens("RPAREN"); return RPAREN }
/\,/              { logDebugTokens("COMMA"); return COMMA }
/\{/              { logDebugTokens("LBRACE"); return LBRACE }
/\}/              { logDebugTokens("RBRACE"); return RBRACE }
/\[/              { logDebugTokens("LBRACKET"); return LBRACKET }
/\]/              { logDebugTokens("RBRACKET"); return RBRACKET }
/\:/              { logDebugTokens("COLON"); return COLON }
/[ \t\n]+/        { logDebugTokens("WHITESPACE (count=%d)", len(yylex.Text())) /* eat up whitespace */ }
/[a-zA-Z_][a-zA-Z0-9\-_]*/  { 
                        lval.s = yylex.Text();
                        logDebugTokens("IDENTIFIER: %s", lval.s);
                        return IDENTIFIER 
                    }
/./               { log.Printf("see problem: %v", yylex.Text()); return int(yylex.Text()[0]) }
//
package parser

import("strconv")
import("log")

func logDebugTokens(format string, v ...interface{}) {
    if DebugTokens && len(v) > 0 {
        log.Printf("DEBUG TOKEN " + format, v)
    } else if DebugTokens {
        log.Printf("DEBUG TOKEN " + format)
    }
}

